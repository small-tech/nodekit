<script>
  import Remote from '@small-tech/remote'
  import ServiceState from './ServiceState.js'
  import SensitiveTextInput from '../../library/SensitiveTextInput.svelte'
  import validateDns from './validateDns.js'

  export let settings

  export let socket
  const remote = new Remote(socket)

  export const state = new ServiceState()

  // Outlets (for referring to interface elements).
  let domainInput
  let accountIdInput
  let accessTokenInput

  async function validateSettings() {
    validateDns(state, settings, remote)
  }

  remote.settings.handler = async () => await validateSettings()
</script>

  <h3 id='dns'>DNS Settings</h3>

  <h4>DNSimple</h4>

  <section class='instructions'>
    <h5>Instructions</h5>
    <ol>
      <li>Get a <a href='https://dnsimple.com'>DNSimple</a> account (a personal account should suffice as you only need to add subdomains to one domain).</li>
      <li><strong>DNSimple does not provide GDPR Data Protection Agreements for anything less than their $300/mo business accounts.</strong> They say one is not necessary for hosting subdomains. (see <a href='https://blog.dnsimple.com/2018/05/gdpr/'>GDPR at DNSimple</a>, <a href='https://dnsimple.com/privacy'>DNSimple Privacy Policy</a>).</li>
      <li>Add your domain to your DNSimple dashboard and find the details required on it under <strong>Account → Automation</strong>.</li>
    </ol>
  </section>

{#if $state.is(state.UNKNOWN)}
  <p>You’ll be informed once you have the correct details are set.</p>
{/if}

{#if $state.is(state.OK)}
  <p>✔️ Your DNS settings are correct.</p>
{/if}

{#if $state.is(state.NOT_OK)}
  <p style='color: red;'>❌️ {state.NOT_OK.error}</p>
{/if}

{#if settings}
  <label for='domain'>Domain</label>
  <input
    id='domain'
    name='domain'
    type='text'
    bind:value={settings.dns.domain}
    bind:this={domainInput}
    on:input={validateSettings}
  />

  <label id='accountIdLabel' for='dnsAccountId'>Account ID</label>
  <SensitiveTextInput
    name='dnsAccountId'
    bind:value={settings.dns.accountId}
    bind:this={accountIdInput}
    on:input={validateSettings}
  />

  <label for='dnsAccessToken' class='block'>Access Token</label>
  <SensitiveTextInput
    name='dnsAccessToken'
    bind:value={settings.dns.accessToken}
    bind:this={accessTokenInput}
    on:input={validateSettings}
  />
{/if}
