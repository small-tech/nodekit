<script>
  import { onMount } from 'svelte'
  import { scale } from 'svelte/transition'

  import { Lines } from '@small-tech/spinners'

  import DomainChecker from '../../library/DomainChecker.svelte'
  import Modal from '../../library/Modal.svelte'
  import { Checkbox } from '../../library/Checkbox'

  import { getPublicKeysHex } from '../../library/keys.js'
  import { tweened } from 'svelte/motion'
  import { cubicOut } from 'svelte/easing'
  import EFFDicewarePassphrase from '@small-tech/eff-diceware-passphrase'

  import Remote from '@small-tech/remote'

  export let socket
  const remote = new Remote(socket)

  const originalSettingUpMessage = 'Setting up your place'

  let settings

  let appToCreate = 0
  let domainToCreate = ''
  let newSiteUrl
  let creatingSite = false
  let showSiteCreationModal = false

  let serverCreationStep = 0
  let serverCreated = false
  let domainNameRegistered = false
  let serverInitialised = false
  let appInstalled = false
  let appRunning = false
  let securityCertificateReady = false
  let serverResponseReceived = false

  let newPlacePassphrase
  let passphraseSavedCheck = false
  let agreeToTerms = false

  let siteCreationSucceeded = false
  let siteCreationFailed = false
  let siteCreationEnded = false

  let settingUpMessage = originalSettingUpMessage
  let settingUpMessageIntervalId

  // Actual progress timings from Hetzner API.
  let serverInitialisationProgress = tweened(0, {
    duration: 333,
    easing: cubicOut
  })

  // Simulated progress timings for app install and app run.
  let appInstallProgress = tweened(0, {
    duration: 5000,
    easing: cubicOut
  })

  let appRunProgress = tweened(0, {
    duration: 8000,
    easing: cubicOut
  })

  let certificateProvisioningProgress = tweened(0, {
    duration: 10000,
    easing: cubicOut
  })

  onMount(async () => {
    const generate = new EFFDicewarePassphrase()
    newPlacePassphrase = generate.entropy(100).join(' ')
  })

  $: if (creatingSite) {
    let dots = 0
    settingUpMessageIntervalId = setInterval(() => {
      dots++
      if (dots > 3) dots = 0
      settingUpMessage = originalSettingUpMessage + '<span style="color: inherit;">.<span>'.repeat(dots) + '<span style="color: white;">.</span>'.repeat(3-dots)
    }, 700)
  } else {
    settingUpMessage = originalSettingUpMessage + '...'
    clearInterval(settingUpMessageIntervalId)
  }

  $: siteCreationEnded = siteCreationSucceeded || siteCreationFailed

  const duration = (milliseconds) => {
    return new Promise(resolve => setTimeout(resolve, milliseconds))
  }

  async function createServer(event) {
    domainToCreate = event.detail.domain

    const publicKeys = await getPublicKeysHex(domainToCreate, newPlacePassphrase)

    console.log('Public keys (hex)', publicKeys)

    remote.places.create.request.send({
      domain: domainToCreate,
      app: appToCreate,
      publicKeys
    })

    // Show the progress modal.
    // (It will be updated when we get progress messages from the server.)

    siteCreationSucceeded = false
    siteCreationFailed = false
    creatingSite = true
    showSiteCreationModal = true
    serverCreationStep++
  }

  // Message handlers.
  // TODO: handle error messages.

  remote.settings.handler = message => {
    settings = message.body
  }

  remote.places.create.response.handler = async message => {
    if (message.status === 'done') {
      serverInitialised = true
      await duration(700)
      serverCreationStep++

      // From here, we simulate progress for the app install and app run staged based on
      // actual timings taken from the same server configuration. There will be some variance and
      // that’s why we wait for an actual response from the server at the end of the process.
      // In the future, we might add an API to Site.js that sends progress information back so
      // we can have more precise timings but this should, for the time being and for the
      // supported apps, give us adequate timings/progress to within a couple of seconds.

      // Wait for app install.

      // Installing Site.js (the only supported app at the moment) takes on average 4 seconds,
      // min: 2.995 seconds, max: 5.54 seconds. Sample size: 10 runs.
      // To be on the safe side, let’s keep this at 5 seconds.
      appInstallProgress.set(1)
      await duration(5000)
      appInstalled = true

      await duration(700) // Wait for Checkbox animation to end.
      serverCreationStep++

      // Running site enable takes ~2-3 seconds.
      // For Owncast, it takes longer as it has to download, install and run owncast (I have
      // two timings so far: 7.4578 seconds and 9.046 seconds; average: 8.312 seconds).
      //
      // TODO: this is currently hard-coded for Site.js Owncast install. At least use the
      // ===== right duration when running just Site.js.
      appRunProgress.set(1)
      await duration(8500)
      appRunning = true

      await duration(700) // Wait for Checkbox animation to end.
      serverCreationStep++

      certificateProvisioningProgress.set(1)
      await duration(10000)
      securityCertificateReady = true

      await duration(700) // Wait for Checkbox animation to end.
      serverCreationStep++

      // Now we actually start polling the server to see if it is ready.
      remote.places.waitForServerResponse.request.send({ domain: domainToCreate })

      newSiteUrl = `https://${domainToCreate}.${settings.dns.domain}`
    } else {
      console.warn('Warning: received unexpected status for remote.places.create.response:', message.status)
    }
  }

  remote.places.create.progress.handler = async message => {
    const Subject = {
      vps: 'vps',
      dns: 'dns'
    }

    switch (message.subject) {
      case Subject.vps:
        if (message.status === 'initialising') {
          serverCreated = true
          await duration(700)
          serverCreationStep++
        } else if (message.status === 'running' || message.status === 'success') {
          serverInitialisationProgress.set(message.progress)
        } else {
          console.log('Warning: received unexpected status for create-server-progress subject VPS:', message.status)
        }
      break

      case Subject.dns:
        if (message.status === 'initialising') {
          domainNameRegistered = true
          await duration(700)
          serverCreationStep++
        } else {
          console.log('Warning: received unexpected status for create-server-progress subject DNS:', message.status)
        }
      break

      default:
        console.log('Warning: unexpected places.create.progress message subject received', message.subject)
    }
  }

  remote.places.waitForServerResponse.response.handler = async message => {
    // OK, server is ready!
    serverResponseReceived = true

    await duration(700) // Wait for Checkbox animation to end.
    serverCreationStep++

    siteCreationSucceeded = true
    creatingSite = false

    // TODO: Once the progress modal has been closed, make sure we
    // ===== reset serverCreationStep, etc.
    //       (Even better, pull out the progress modal into its own component)
  }
</script>

<h2>Places</h2>

{#if !settings}
  <p>Loading…</p>
{/if}

{#if settings}
  <h3>Create a new Small Web place</h3>
  <p>You can create a new place without requiring payment details from here (e.g., for your own organisation, for friends, etc.)</p>

  <div id='createAppForm'>
    <label for='appToCreate'>App</label>
    <select
      id='appToCreate'
      bind:value={appToCreate}
      size={settings.apps.length}
      class='openSelectBox'
    >
      {#each settings.apps as app, index}
        <option value={index}>{app.name}</option>
      {/each}
    </select>

    <p class='label'>Passphrase</p>
    <p>You can share this password with people who you want to be able to manage this domain without full administrator access. <strong>Please ask them to store this passphrase is their password managers.</strong></p>
    <div class='passphrase'>{newPlacePassphrase}</div>

    <!--
    Move this to index.

    <label class='checkbox-label'>
      <Checkbox bind:checked={passphraseSavedCheck}/> I have stored this passphrase in my password manager.
    </label>

    <label class='checkbox-label'>
      <Checkbox bind:checked={agreeToTerms}/> I agree to the terms of service.
    </label>
    -->

    <DomainChecker
      config={settings}
      buttonLabel='Create server'
      on:create={createServer}
    />
  </div>

  <h3>Hosted places</h3>
  <p>This is the list of Small Web places that are currently being hosted by you.</p>
  <p><strong>Nothing yet.</strong></p>
{/if}


<Modal show={showSiteCreationModal} title={settingUpMessage} hasCloseButton={siteCreationEnded} hasActionButton={siteCreationEnded} url={newSiteUrl}>

  <p class='modalIntroduction'>Setting up {settings ? settings.apps[appToCreate].name : ''} on <strong>{domainToCreate}.{settings ? settings.dns.domain : ''}</strong>.</p>

  <ol class='serverCreationProgress'>
    <li>
      <Checkbox checked={false} bind:checkedControlled={serverCreated} disabled={true}/>
      <span class:currentStep={serverCreationStep === 1}>Commission server</span>
    </li>
    <li>
      <Checkbox checked={false} bind:checkedControlled={domainNameRegistered} disabled={true}/>
      <span class:currentStep={serverCreationStep === 2}>Register domain name</span>
    </li>
    <li>
      <Checkbox checked={false} bind:checkedControlled={serverInitialised} disabled={true}/>
      <span class:currentStep={serverCreationStep === 3}>Initialise server</span>
      {#if serverCreationStep === 3}
        <progress value={$serverInitialisationProgress} />
      {/if}
    </li>
    <li>
      <Checkbox checked={false} bind:checkedControlled={appInstalled} disabled={true}/>
      <span class:currentStep={serverCreationStep === 4}>Install {settings ? settings.apps[appToCreate].name : ''}</span>
      {#if serverCreationStep === 4}
        <progress value={$appInstallProgress} />
      {/if}
    </li>
    <li>
      <Checkbox checked={false} bind:checkedControlled={appRunning} disabled={true}/>
      <span class:currentStep={serverCreationStep === 5}>Run {settings ? settings.apps[appToCreate].name : ''}</span>
      {#if serverCreationStep === 5}
        <progress value={$appRunProgress} />
      {/if}
    </li>
    <li>
      <Checkbox checked={false} bind:checkedControlled={securityCertificateReady} disabled={true}/>
      <span class:currentStep={serverCreationStep === 6}>Get security certificate</span>
      {#if serverCreationStep === 6}
        <progress value={$certificateProvisioningProgress} />
      {/if}
    </li>
    <li>
      <Checkbox checked={false} bind:checkedControlled={serverResponseReceived} disabled={true}/>
      <span class:currentStep={serverCreationStep === 7}>Wait for response from server</span>
      {#if serverCreationStep === 7}
        <!-- TODO: style this better. Perhaps move to checkbox component as progress state? -->
        <Lines size=2em/>
      {/if}
    </li>
  </ol>

  {#if siteCreationSucceeded}
    <p class='appReady' in:scale={{duration: 600}}>🎉️ Your Small Web place is ready!</p>
  {/if}
</Modal>

<style>
  .checkbox-label {
    display: inline-block;
    margin: none;
  }

  .appReady {
    text-align: center;
    font-size: 1.5em;
  }

  .modalIntroduction {
    font-size: 1.25em;
  }

  .passphrase {
    margin-bottom: 1.5em;
  }


  .serverCreationProgress {
    list-style-type: none;
    font-size: 1.5em;
  }

  progress {
    display: block;
    width: 70%;
    height: 5px;
    margin-top: -0.5em;
    margin-bottom: 0.3em;
    margin-left: 2.75em;
    background-color: #ccc;
    border: 0;
  }

  .currentStep {
    font-weight: bold;
  }

  #createAppForm {
    margin-bottom: 2em;
  }
</style>
